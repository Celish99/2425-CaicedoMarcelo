# Clase base
class Animal:
    def __init__(self, nombre):
        self.nombre = nombre  # Atributo encapsulado
    
    def hacer_sonido(self):
        return f"{self.nombre} hace un sonido."

# Clase derivada
class Perro(Animal):
    def __init__(self, nombre, raza):
        super().__init__(nombre)  # Herencia del constructor
        self.raza = raza  # Atributo encapsulado
    
    def hacer_sonido(self):  # Sobreescritura del método
        return f"{self.nombre} (raza {self.raza}) dice: ¡Guau!"

# Polimorfismo: Usar el mismo método con diferentes comportamientos
def mostrar_sonido(animal):
    print(animal.hacer_sonido())

# Crear objetos
animal1 = Animal("Gato")
animal2 = Perro("Rex", "Pastor Alemán")

# Uso del polimorfismo
mostrar_sonido(animal1)
mostrar_sonido(animal2)
